swagger: "2.0"
info:
  description: "This is Demo of using 'Gensim' Python modules."
  version: "0.1.0"
  title: "Gensim Demo"
  contact:
    email: "omar@veriguide.org"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "192.168.1.108"
basePath: "/v1"
tags:
- name: "Elementary"
  description: "Prepare data from users"
- name: "Dict"
  description: "To build a Dictionary for evaluation."
- name: "Text Process"
  description: "Using function of Gensim"
schemes:
- "http"
- "https"
paths:
  /prepcorpora:
    post:
      tags:
        - "Elementary"
      summary: "Returns Corpora"
      description: "Build the store of Corpora"
      operationId: "prepCorpora"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
      - name: "essay"
        in: "query"
        description: "Documents to be added to Dictionary"
        required: true
        type: "string"
      - name: "delimit"
        in: "query"
        description: "Character to separate essays"
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Corpora"
  /dictalldict:
    get:
      tags:
      - "Dict"
      summary: "Returns all Dictinaries"
      description: "Build the store of Corpora"
      operationId: "allDictionary"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
        503:
          description: "Query database failed when: find()"
  /dictone:
    get:
      tags:
      - "Dict"
      summary: "Get a Dict"
      description: ""
      operationId: "oneDict"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "UUID"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Dict"
  /dictnewdict:
    post:
      tags:
      - "Dict"
      summary: "Create a new Dictionary entry"
      description: ""
      operationId: "newDict"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      # - in: "body"
      #   name: "body"
      #   description: "Pet object that needs to be added to the store"
      #   required: true
      #   schema:
      #     $ref: "#/definitions/Pet"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /adddocument:
    post:
      tags:
      - "Dict"
      responses:
        200:
          description: ""
  /uploaddocument:
    post:
      tags:
      - "Dict"
      responses:
        200:
          description: ""
  /_resetdictionary:
    post:
      tags:
      - "Dict"
      responses:
        200:
          description: ""
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Corpora:
    type: "object"
    properties:
      status:
        type: "string"
      texts:
        type: "array"
        items:
          type: "array"
          items:
            type: "string"
      dictionary:
        type: "object"
      corpus:
        type: "string"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  Dict:
    type: "object"
    properties:
      uuid:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
